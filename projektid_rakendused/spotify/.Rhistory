icon = icon("info")),
menuItem("Omaduste võrdlemine",
tabName = "omadused",
icon = icon("music")),
menuItem("Edetabel",
tabName = "edetabel",
icon = icon("volume-up"))
)
),
dashboardBody(
tags$style(".small-box.bg-yellow { background-color: #C0C0C0 !important;
color: #FFFFFF !important; }"),
shinyDashboardThemes(
theme = "grey_light"
),
tabItems(
tabItem(tabName = "sissejuhatus",
fluidRow(
box(title = "Spotify 2018 top 100",
"Spotify on digitaalne muusika jagamise teenus, mis võimaldab
ligipääsu miljonitele lugudele, podcastidele
ja videotele artistidelt üle terve maailma.",
br(), br(),
"Tegemist on Tartu Ülikooli aine 'Statistiline andmeteadus ja visualiseerimine' (kevad 2019)
raames loodud rakendusega, mille abil saab uurida Spotify 2018 aasta
sadat kõige kuulatumat lugu ning nendega seonduvaid omadusi.",
br(),
"Koostajad: Brigitta Rebane ja Maarja Mustimets",
br(),br(),
a("Andmed lehelt www.kaggle.com",
href="https://www.kaggle.com/nadintamer/top-spotify-tracks-of-2018"),
width = 12)
),
fluidRow(
box(
plotOutput("sonapilv"), width = 6
),
box(
plotOutput("muusikupilv"), width = 6
)
)
),
tabItem(
tabName = "omadused",
fluidRow(
column(width = 4,
box(
title = "Võrdle laulude omadusi", width = NULL,
selectInput(inputId = "omadus1",
label = "Vali esimene omadus",
choices= colnames(subdata),
selected = "tantsitavus"),
selectInput(inputId = "omadus2",
label = "Vali esimene omadus",
choices= colnames(subdata),
selected = "rõõmsameelsus"),
valueBoxOutput("korrelatsioonikordaja", width = 12)
),
box(valueBoxOutput("omaduse1kirj", 12),
valueBoxOutput("omaduse2kirj",12), width = NULL)
),
column(width = 8,
box(title="Omaduste hajuvusdiagramm",
plotOutput("scatter"), width = NULL),
box(
title ="Korrelatsioonimaatriks", width = NULL,
plotOutput("korrelatsioon"))
)
)
),
tabItem(tabName = "edetabel",
fluidRow(
box(
title = "Tekita edetabel:",
sliderInput(inputId = "obs", label = "Vali laulude arv:",
min=1,
max=100,
value=10),
selectInput(inputId = "edetabelomadus",
label = "Vali omadus:",
choices = colnames(subdata),
selected = "tantsitavus"),
radioButtons(inputId = "paremhalvem",
label = "Tahan näha...",
choices = c("Parimaid" = "head", "Halvimaid" = "tail"),
inline = T),
uiOutput("video")
),
box(DT::dataTableOutput("edetabel"))
)
)
)
)
)
server <- function(input, output, session) {
output$korrelatsioonikordaja <- renderValueBox({
valueBox(
value= tags$p("Korrelatsioonikordaja", style = "font-size: 50%;"),
korrelatsioonikordaja(subdata, input$omadus1, input$omadus2),
color= "yellow"
)
})
output$omaduse1kirj <- renderValueBox({
valueBox(
value = tags$p(input$omadus1, style = "font-size: 50%;
text-transform: capitalize;"),
#Pealkirja suurus väiksemaks & omadus suure tähega!
omaduse_kirjeldus(input$omadus1),
color = "yellow" #CSS-is silt "yellow", tegelikult hall
)
})
output$omaduse2kirj <- renderValueBox({
valueBox(
value = tags$p( input$omadus2, style = "font-size: 50%;
text-transform: capitalize;"),
#Pealkirja suurus väiksemaks & omadus suure tähega!
omaduse_kirjeldus(input$omadus2),
color = "yellow" #CSS-is silt "yellow", tegelikult hall
)
})
output$scatter <- renderPlot({
scatter(subdata, input$omadus1, input$omadus2)
})
output$sonapilv <- renderPlot({
sonapilv(andmed)
}, height = function() {
session$clientData$output_sonapilv_width
})
output$muusikupilv <- renderPlot({
muusikupilv(andmed)
}, height = function() {
session$clientData$output_muusikupilv_width
})
output$korrelatsioon <- renderPlot({
korrelatsioon(andmed)
})
output$edetabel <- renderDataTable(
edetabel(andmed, input$obs, input$edetabelomadus, input$paremhalvem),
rownames= FALSE
)
output$video <- renderUI({
click <- input$edetabelomadus
if(!is.null(click)){
link = memisc::cases(
"IKUkOQIKQII" = click=="tantsitavus",
"JyqD_zfXfi8" = click=="laivilisus",
"V1Pl8CzNzCw "= click=="akustilisus",
"U9BwWKXjVaI" = click=="energilisus",
"jzD_yyEcp0M" = click=="helitugevus",
"IKUkOQIKQII" = click=="kõnelisus",
"fKopy74weus" = click=="instrumentaalsus",
"JGwWNGJdvx8" = click=="rõõmsameelsus",
"GmHrjFIWl6U" = click=="tempo",
"9jI-z9QN6g8" = click=="kestus_ms"
)
#ei saa/taha videot otse app'i embed'ida, sest video vaatama hakkamisel crash'ib terve app
HTML(paste0('<iframe width="200" height="100" src="https://www.youtube.com/embed/', link ,'" frameborder="0" allowfullscreen></iframe>'))
}
link <- a("Valitud omaduse kõrgeima väärtusega laul", href=paste0('https://www.youtube.com/embed/', link))
tagList(link)
})
}
shinyApp(ui, server)
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
library(ggplot2)
library(DT)
install.packages("DT")
library(DT)
install_github("nik01010/dashboardthemes", force=TRUE)
#install_github("nik01010/dashboardthemes", force=TRUE)
library(dashboardthemes)
library(corrplot)
library(tm)
library(SnowballC)
install.packages("tm")
install.packages("SnowballC")
library(SnowballC)
library(wordcloud)
library(RColorBrewer)
install.packages("wordcloud")
library(wordcloud)
#Loeme andmed sisse
andmed <- read.csv("top2018.csv", header=TRUE, ",", encoding = "UTF-8")
# Setting up workspace, install 'rstudioapi' if using for first time
#install.packages('rstudioapi')
setwd(dirname(rstudioapi::getActiveDocumentContext()[[2]]))
#Loeme andmed sisse
andmed <- read.csv("top2018.csv", header=TRUE, ",", encoding = "UTF-8")
colnames(andmed) <- c("id", "nimi", "artistid", "tantsitavus", "energilisus",
"helistik", "helitugevus", "helilaad",  "kõnelisus",
"akustilisus", "instrumentaalsus", "laivilisus",
"rõõmsameelsus", "tempo", "kestus_ms", "taktimõõt")
#Valime andmed, mida on mõttekas omavahel korrelatsiooni seada
subdata <- subset(andmed,select=-c(id, nimi, artistid, helistik, helilaad, taktimõõt))
scatter <- function(dat, x.var, y.var){
ggp <- ggplot(data = dat,
aes_string(x = x.var,
y = y.var,
color= y.var)) + geom_point()+ geom_smooth()
print(ggp)
}
#Omaduste kirjeldused
omaduse_kirjeldus <- function(omadus){
if(omadus=="tantsitavus") {
return("Tantsitavus kirjeldab,
kui hästi loo järgi tantsida saab.
See arvutakse muusikaliste elementide, sealhulgas tempo,
rütmi stabiilsuse, löögitugevuse ja üldise korrapärasuse põhjal.
Väärtus 0.0 on vähim tantsitavus ja 1.0 on kõrgeim tantsitavus.")
}
else if(omadus=="tempo"){
return("Loo hinnanguline tempo määratakse löökides minutis.
Muusikaliselt on tempo antud loo kiirus,
mis tuleb keskmisest löögipikkusest.")
}
else if(omadus=="energilisus"){
return("Energilisuse väärtused on 0.0 ja 1.0 vahel.
See omadus kujutab endast intensiivsuse ja aktiivsuse tajutavat mõõdet.
Tavaliselt energilised lood tunduvad kiired, valjud ja mürarikkad.
Näiteks deathmetal'il on kõrge energilisus, Bachi prelüüdil madal.
Tajutavad tunnused, mis määravad energilisuse on dünaamiline ulatus,
tajutav helitugevus, kõlavärv ja üldine entroopia.")
}
else if(omadus=="helitugevus"){
return("Üldine helitugevus loos määratakse detsibellides (dB).
Helitugevuse väärtus on keskmine helitugevus üle terve loo
ja see on kasulik teiste lugudega suhtelise
helitugevuse võrdlemiseks. Helitugevus on helikvaliteet,
mis on füüsilise amplituudi esmane
psühholoogiline korrelatsioon.
Väärtused on vahemikus -60 kuni 0 db.")
}
else if(omadus=="kõnelisus"){
return("Kõnelisus tuvastab räägitud sõnad.
Mida kõnele sarnasem on salvestis
(näiteks jutusaade, audioraamat, luule),
seda lähemal on väärtus arvule 1.0.
Väärtused üle arvu 0.66 kirjeldavad lugusid,
mis on ilmselt täielikult räägitud.
Väärtused vahemikus 0.33 kuni 0.66
kirjeldavad lugusid, mis võivad sisaldada
nii muusikat kui ka kõne, kas siis osadena
või ühtlaselt.
Sinna hulka kuulub näiteks räppmuusika.
Väärtused alla 0.33 kirjeldavad tõenäoliselt
muusikat ja muid mitte kõne sarnaseid lugusid.")
}
else if(omadus=="akustilisus"){
return("Väärtuste vahemik on alates 0.0 kuni 1.0.
Väärtus 1.0 väidab, et lugu on suure tõenäosusega akustiline.")
}
else if(omadus=="instrumentaalsus"){
return("Insrtumentaalsus ennustab,
kas lugu sisaldab vokaale.
Taustahelid nagu 'Ooh' ja 'aah' loetakse
siin kontekstis instrumentaaliks.
Räpp ja öeldud sõnad on loetakse vokaalseks.
Mida lähemal on instrumentaalsuse väärtus
arvule 1.0, seda suurema tõenöosusega
ei sisalda lugu vokaale. Väärtused üle 0.5
esindavad instrumentaalseid lugusid,
kuid tõenäosus on suurem,
kui väärtus läheneb arvule 1.0.")
}
else if(omadus=="laivilisus"){
return("Laivilisus tuvastab publiku
esinemise salvestuses. Kõrgemad laivilisuse väärtused
kirjeldavad suuremat tõenäosust, et lugu esitati live'is.
Kui väärtus on üle 0.8, on lugu ilmselt esitatud live'is.")
}
else if(omadus=="rõõmsameelsus"){
return("Jõu väärtuste vahemik on alates 0.0 kuni 1.0.
See omadus kirjeldab muusikalist positiivsust,
mida lugu edastab. Lood kõrge valentsiga
kõlavad rohkem positiivselt (näiteks rõõmsalt, eufooriliselt),
kui lood madala valentsiga, siis nad kõlavad negatiivsemalt
(näiteks kurvalt, depressiivselt, vihaselt).")
}
else {
return("Loo kestus millisekundites.")
}
}
#Korrelatsioonileidja funktsioon
korrelatsioonikordaja <- function(dat, omadus1, omadus2){
c = cor(dat[,omadus1],dat[,omadus2])
c = c%>%
round(3)
}
#Sõnapilve funktsioon
sonapilv <- function(and){
# sõnapilv: mis sõnu laulunimedes kõige enam on
b <- gsub("\\s*\\([^\\)]+\\)","",as.character(and$nimi))
b <- Corpus(VectorSource(b))
b <- tm_map(b, removeNumbers)
b <- tm_map(b, removePunctuation)
b <- tm_map(b, stripWhitespace)
sonad <- wordcloud(words = b, min.freq = 1,
max.words=50, random.order=F, rot.per=0.2,
colors=brewer.pal(8, "Dark2"), family = "mono", font = 2, scale=c(5,.1))
return(sonad)
}
#Muusikupilve funktsioon
muusikupilv <- function(and){
# sõnapilv: mis artiste enam on
b <- gsub("\\s*\\([^\\)]+\\)","",as.character(and$artistid))
b <- Corpus(VectorSource(b))
b <- tm_map(b, removeNumbers)
b <- tm_map(b, removePunctuation)
b <- tm_map(b, stripWhitespace)
muusikud <- wordcloud(words = b, min.freq = 1,
max.words=50, random.order=F, rot.per=0.2,
colors=brewer.pal(8, "Dark2"), family = "mono", font = 2, scale=c(5,.1))
return(muusikud)
}
#Korrelatsioonigraafik
korrelatsioon <- function(dat) {
korr <- dat %>%
dplyr::select(tantsitavus, energilisus, helitugevus, kõnelisus, akustilisus, instrumentaalsus,
laivilisus, rõõmsameelsus, tempo, kestus_ms)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
korrel <- corrplot(cor(korr), col=col(200), method="color", type="upper",
tl.col="black", order="hclust",
addCoef.col = "black", diag=FALSE, number.font = 0.7)
return(korrel)
}
#Edetabel
edetabel <- function(and, nr, om, ph) {
par_hal <- and %>%
dplyr::select("nimi", "artistid", om)
par_hal <- par_hal[order(par_hal[,om]),]
par_hal <- top_n(par_hal, if (ph=="head") nr else -nr)
if (ph=="head") par_hal <- par_hal[dim(par_hal)[1]:1,]
par_hal$NR <- c(1:nrow(par_hal))
par_hal <- par_hal %>%
dplyr::select(NR, nimi, artistid, om) %>%
rename("Loo nimi" = nimi, "Artisti nimi" = artistid, "Väärtus"=om)
return(par_hal)
}
ui <- dashboardPage(
dashboardHeader(
title = "Spotify 2018"),
dashboardSidebar(
sidebarMenu(
menuItem("Sissejuhatus",
tabName = "sissejuhatus",
icon = icon("info")),
menuItem("Omaduste võrdlemine",
tabName = "omadused",
icon = icon("music")),
menuItem("Edetabel",
tabName = "edetabel",
icon = icon("volume-up"))
)
),
dashboardBody(
tags$style(".small-box.bg-yellow { background-color: #C0C0C0 !important;
color: #FFFFFF !important; }"),
shinyDashboardThemes(
theme = "grey_light"
),
tabItems(
tabItem(tabName = "sissejuhatus",
fluidRow(
box(title = "Spotify 2018 top 100",
"Spotify on digitaalne muusika jagamise teenus, mis võimaldab
ligipääsu miljonitele lugudele, podcastidele
ja videotele artistidelt üle terve maailma.",
br(), br(),
"Tegemist on Tartu Ülikooli aine 'Statistiline andmeteadus ja visualiseerimine' (kevad 2019)
raames loodud rakendusega, mille abil saab uurida Spotify 2018 aasta
sadat kõige kuulatumat lugu ning nendega seonduvaid omadusi.",
br(),
"Koostajad: Brigitta Rebane ja Maarja Mustimets",
br(),br(),
a("Andmed lehelt www.kaggle.com",
href="https://www.kaggle.com/nadintamer/top-spotify-tracks-of-2018"),
width = 12)
),
fluidRow(
box(
plotOutput("sonapilv"), width = 6
),
box(
plotOutput("muusikupilv"), width = 6
)
)
),
tabItem(
tabName = "omadused",
fluidRow(
column(width = 4,
box(
title = "Võrdle laulude omadusi", width = NULL,
selectInput(inputId = "omadus1",
label = "Vali esimene omadus",
choices= colnames(subdata),
selected = "tantsitavus"),
selectInput(inputId = "omadus2",
label = "Vali esimene omadus",
choices= colnames(subdata),
selected = "rõõmsameelsus"),
valueBoxOutput("korrelatsioonikordaja", width = 12)
),
box(valueBoxOutput("omaduse1kirj", 12),
valueBoxOutput("omaduse2kirj",12), width = NULL)
),
column(width = 8,
box(title="Omaduste hajuvusdiagramm",
plotOutput("scatter"), width = NULL),
box(
title ="Korrelatsioonimaatriks", width = NULL,
plotOutput("korrelatsioon"))
)
)
),
tabItem(tabName = "edetabel",
fluidRow(
box(
title = "Tekita edetabel:",
sliderInput(inputId = "obs", label = "Vali laulude arv:",
min=1,
max=100,
value=10),
selectInput(inputId = "edetabelomadus",
label = "Vali omadus:",
choices = colnames(subdata),
selected = "tantsitavus"),
radioButtons(inputId = "paremhalvem",
label = "Tahan näha...",
choices = c("Parimaid" = "head", "Halvimaid" = "tail"),
inline = T),
uiOutput("video")
),
box(DT::dataTableOutput("edetabel"))
)
)
)
)
)
server <- function(input, output, session) {
output$korrelatsioonikordaja <- renderValueBox({
valueBox(
value= tags$p("Korrelatsioonikordaja", style = "font-size: 50%;"),
korrelatsioonikordaja(subdata, input$omadus1, input$omadus2),
color= "yellow"
)
})
output$omaduse1kirj <- renderValueBox({
valueBox(
value = tags$p(input$omadus1, style = "font-size: 50%;
text-transform: capitalize;"),
#Pealkirja suurus väiksemaks & omadus suure tähega!
omaduse_kirjeldus(input$omadus1),
color = "yellow" #CSS-is silt "yellow", tegelikult hall
)
})
output$omaduse2kirj <- renderValueBox({
valueBox(
value = tags$p( input$omadus2, style = "font-size: 50%;
text-transform: capitalize;"),
#Pealkirja suurus väiksemaks & omadus suure tähega!
omaduse_kirjeldus(input$omadus2),
color = "yellow" #CSS-is silt "yellow", tegelikult hall
)
})
output$scatter <- renderPlot({
scatter(subdata, input$omadus1, input$omadus2)
})
output$sonapilv <- renderPlot({
sonapilv(andmed)
}, height = function() {
session$clientData$output_sonapilv_width
})
output$muusikupilv <- renderPlot({
muusikupilv(andmed)
}, height = function() {
session$clientData$output_muusikupilv_width
})
output$korrelatsioon <- renderPlot({
korrelatsioon(andmed)
})
output$edetabel <- renderDataTable(
edetabel(andmed, input$obs, input$edetabelomadus, input$paremhalvem),
rownames= FALSE
)
output$video <- renderUI({
click <- input$edetabelomadus
if(!is.null(click)){
link = memisc::cases(
"IKUkOQIKQII" = click=="tantsitavus",
"JyqD_zfXfi8" = click=="laivilisus",
"V1Pl8CzNzCw "= click=="akustilisus",
"U9BwWKXjVaI" = click=="energilisus",
"jzD_yyEcp0M" = click=="helitugevus",
"IKUkOQIKQII" = click=="kõnelisus",
"fKopy74weus" = click=="instrumentaalsus",
"JGwWNGJdvx8" = click=="rõõmsameelsus",
"GmHrjFIWl6U" = click=="tempo",
"9jI-z9QN6g8" = click=="kestus_ms"
)
#ei saa/taha videot otse app'i embed'ida, sest video vaatama hakkamisel crash'ib terve app
HTML(paste0('<iframe width="200" height="100" src="https://www.youtube.com/embed/', link ,'" frameborder="0" allowfullscreen></iframe>'))
}
link <- a("Valitud omaduse kõrgeima väärtusega laul", href=paste0('https://www.youtube.com/embed/', link))
tagList(link)
})
}
shinyApp(ui, server)
library(tm)
shinyApp(ui, server)
