# Setting up workspace, install 'rstudioapi' if using for first time
#install.packages('rstudioapi')
setwd(dirname(rstudioapi::getActiveDocumentContext()[[2]]))
euroopa_riigid <- read.table("euroopa_riigid.txt",stringsAsFactors = F,encoding="UTF-8",header=F) %>%pull()
andmestik <- read.csv("globalterrorismdb_0617dist.csv",header=T,encoding="UTF-8",stringsAsFactors = T) %>%
dplyr::select(country_txt, targtype1_txt, weaptype1_txt) %>%
filter(country_txt %in% c("United States",euroopa_riigid))
andmestik <- read.csv("globalterrorismdb_0617dist.csv",header=T,encoding="UTF-8",stringsAsFactors = T)
andmestik <- read.csv("globalterrorismdb_0617dist.csv",header=T,encoding="UTF-8",stringsAsFactors = T) %>%
dplyr::select(iyear, country_txt, targtype1_txt, weaptype1_txt) %>%
filter(country_txt %in% c("United States",euroopa_riigid))
table(andmestik$iyear, andmestik$country_txt)
andmestik_edasi <- andmestik %>%
mutate(Piirkond = ifelse(country_txt=="United States","USA","Euroopa"),
Relv = ifelse(weaptype1_txt=="Firearms","Tulirelvad",
ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Muu","Ülejäänud")),
# ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Lõhkeained",
#        ifelse(weaptype1_txt=="Incendiary","Süütamine","Muu"))),
"Sihtmärk" = ifelse(targtype1_txt=="Business","Ärid",
ifelse(targtype1_txt=="Private Citizens & Property","Eraisik/-omand",
ifelse(targtype1_txt=="Police","Politsei",
ifelse(targtype1_txt=="Educational Institution",
"Haridusasutus","Muu")))))%>%
filter(Relv != "Ülejäänud") %>%
select(Piirkond,Relv,`Sihtmärk`)
andmestik_edasi <- andmestik %>%
mutate(Piirkond = ifelse(country_txt=="United States","USA","Euroopa"),
Relv = ifelse(weaptype1_txt=="Firearms","Tulirelvad",
ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Muu","Ülejäänud")),
# ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Lõhkeained",
#        ifelse(weaptype1_txt=="Incendiary","Süütamine","Muu"))),
"Sihtmärk" = ifelse(targtype1_txt=="Business","Ärid",
ifelse(targtype1_txt=="Private Citizens & Property","Eraisik/-omand",
ifelse(targtype1_txt=="Police","Politsei",
ifelse(targtype1_txt=="Educational Institution",
"Haridusasutus","Muu")))))%>%
filter(Relv != "Ülejäänud") %>%
select(iyear,Piirkond,Relv,`Sihtmärk`)
table(andmestik_edasi$iyear, andmestik_edasi$country_txt)
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
ggplot(andmestik_edasi, aes(x=iyear, y=Piirkond)) %>%
geom_bar
ggplot(andmestik_edasi, aes(x=iyear, y=Piirkond)) +
geom_bar
ggplot(andmestik_edasi, aes(x=iyear, y=Piirkond)) +
geom_bar()
ggplot(andmestik_edasi, aes(x=iyear, col=Piirkond)) +
geom_bar()
ggplot(andmestik_edasi, aes(x=iyear, fill=Piirkond)) +
geom_bar()
andmestik_edasi <- andmestik %>%
mutate(Piirkond = country_txt,
Relv = ifelse(weaptype1_txt=="Firearms","Tulirelvad",
ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Muu","Ülejäänud")),
# ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Lõhkeained",
#        ifelse(weaptype1_txt=="Incendiary","Süütamine","Muu"))),
"Sihtmärk" = ifelse(targtype1_txt=="Business","Ärid",
ifelse(targtype1_txt=="Private Citizens & Property","Eraisik/-omand",
ifelse(targtype1_txt=="Police","Politsei",
ifelse(targtype1_txt=="Educational Institution",
"Haridusasutus","Muu")))))%>%
filter(Relv != "Ülejäänud") %>%
select(iyear,Piirkond,Relv,`Sihtmärk`)
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
andmestik_edasi <- andmestik %>%
mutate(Piirkond = as.character(country_txt),
Relv = ifelse(weaptype1_txt=="Firearms","Tulirelvad",
ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Muu","Ülejäänud")),
# ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Lõhkeained",
#        ifelse(weaptype1_txt=="Incendiary","Süütamine","Muu"))),
"Sihtmärk" = ifelse(targtype1_txt=="Business","Ärid",
ifelse(targtype1_txt=="Private Citizens & Property","Eraisik/-omand",
ifelse(targtype1_txt=="Police","Politsei",
ifelse(targtype1_txt=="Educational Institution",
"Haridusasutus","Muu")))))%>%
filter(Relv != "Ülejäänud") %>%
select(iyear,Piirkond,Relv,`Sihtmärk`)
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
ggplot(andmestik_edasi, aes(x=iyear, fill=Piirkond)) +
geom_bar()
andmestik_edasi <- andmestik %>%
mutate(Piirkond = factor(country_txt),
Relv = ifelse(weaptype1_txt=="Firearms","Tulirelvad",
ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Muu","Ülejäänud")),
# ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Lõhkeained",
#        ifelse(weaptype1_txt=="Incendiary","Süütamine","Muu"))),
"Sihtmärk" = ifelse(targtype1_txt=="Business","Ärid",
ifelse(targtype1_txt=="Private Citizens & Property","Eraisik/-omand",
ifelse(targtype1_txt=="Police","Politsei",
ifelse(targtype1_txt=="Educational Institution",
"Haridusasutus","Muu")))))%>%
filter(Relv != "Ülejäänud") %>%
select(iyear,Piirkond,Relv,`Sihtmärk`)
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
andmestik_edasi <- andmestik %>%
mutate(Piirkond = factor(country_txt),
Relv = ifelse(weaptype1_txt=="Firearms","Tulirelvad",
ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Muu","Ülejäänud")),
# ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Lõhkeained",
#        ifelse(weaptype1_txt=="Incendiary","Süütamine","Muu"))),
"Sihtmärk" = ifelse(targtype1_txt=="Business","Ärid",
ifelse(targtype1_txt=="Private Citizens & Property","Eraisik/-omand",
ifelse(targtype1_txt=="Police","Politsei",
ifelse(targtype1_txt=="Educational Institution",
"Haridusasutus","Muu")))))%>%
filter(Relv != "Ülejäänud") %>%
select(iyear,Piirkond,Relv,`Sihtmärk`)
andmestik_edasi <- andmestik %>%
mutate(Piirkond = droplevels(country_txt),
Relv = ifelse(weaptype1_txt=="Firearms","Tulirelvad",
ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Muu","Ülejäänud")),
# ifelse(weaptype1_txt=="Explosives/Bombs/Dynamite","Lõhkeained",
#        ifelse(weaptype1_txt=="Incendiary","Süütamine","Muu"))),
"Sihtmärk" = ifelse(targtype1_txt=="Business","Ärid",
ifelse(targtype1_txt=="Private Citizens & Property","Eraisik/-omand",
ifelse(targtype1_txt=="Police","Politsei",
ifelse(targtype1_txt=="Educational Institution",
"Haridusasutus","Muu")))))%>%
filter(Relv != "Ülejäänud") %>%
select(iyear,Piirkond,Relv,`Sihtmärk`)
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
ggplot(andmestik_edasi, aes(x=iyear, fill=Piirkond)) +
geom_bar()
ggplot(andmestik_edasi, aes(x=iyear, fill=Piirkond)) +
geom_bar()
order(table(andmestik_edasi$Piirkond))
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond[order(table(andmestik_edasi$Piirkond))])
andmestik_edasi %>%
group_by(Piirkond) %>%
mutate(n=n()) %>%
ungroup()
andmestik_edasi %>%
group_by(Piirkond) %>%
mutate(n=n()) %>%
arrange(n) %>%
ungroup()
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
View(andmestik_edasi)
andmestik_edasi = andmestik_edasi %>%
group_by(Piirkond) %>%
mutate(n=n()) %>%
arrange(n)
View(andmestik_edasi)
andmestik_edasi = andmestik_edasi %>%
group_by(Piirkond) %>%
mutate(n=n()) %>%
arrange(desc(n))
View(andmestik_edasi)
table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
test <- table(andmestik_edasi$iyear, andmestik_edasi$Piirkond)
test <- as.data.frame(table(andmestik_edasi$iyear, andmestik_edasi$Piirkond))
View(test)
andmestik_edasi %>%
group_by(Piirkond) %>%
summarise(n=n()) %>%
arrange(desc(n))
andmestik_edasi %>%
group_by(Piirkond) %>%
summarise_(n=n()) %>%
arrange(desc(n))
library(dplyr)
andmestik_edasi %>%
group_by(Piirkond) %>%
summarise(n=n()) %>%
arrange(desc(n))
andmestik_edasi %>%
group_by(Piirkond) %>%
LRstats(n=n()) %>%
arrange(desc(n))
# Load data
print(load(url("http://www.ms.ut.ee/mart/andmeteadus/WB.RData")))
WorldB[1:3,]
# Load data
print(load(url("http://www.ms.ut.ee/mart/andmeteadus/WB.RData")))
WorldB[1:3,]
pca=prcomp( na.omit(WorldB[,-1]) , scale=T)
summary(pca)
# Find the values for the first principal component
predict(pca, WorldB)[1:3,]
# Pick out the first two principal components and add to our data set:
WorldB=data.frame(WorldB, predict(pca, WorldB)[,1:2])
WorldB[1:2,]
attach(WorldB)
# Visualise the PCA resulls
plot(PC1, PC2, col="white")
text(PC1, PC2, Name)
text(PC1[Name=="Estonia"], PC2[Name=="Estonia"],
"Estonia", col="red" )
# Factor loading of the first two principal components
pca$rotation[,1:2]
# Ways of visualising principal component analysis results using factoextra package
install.packages("factoextra")
library(factoextra)
# Plot that describes the importance of principal components
fviz_eig(pca)
# Plot 2:
rownames(WorldB)=WorldB$Name
pca=prcomp( na.omit(WorldB[,2:13]) , scale=T)
fviz_pca_ind(pca,
col.ind = "coord", # colour according to distance from
# center
repel = TRUE     # Don’t stack country names on each other
)
# Plot 3 – loadings of observed variables into principal components
fviz_pca_var(pca,
# colours according to loadings of first 3 components
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
# Avoid stacking of text
repel = TRUE
)
# Load data on diseases and desire for authoritarianism
print(load(url("http://www.ms.ut.ee/mart/andmeteadus/Murray.RData")))
Murray[1:3,]
model=lm(authoritarianism~pathogens, data=Murray)
summary(model)
plot(Murray$pathogens, Murray$authoritarianism)
abline(model)
# Merge the Wordl Bank and Murray data sets
merged=merge(WorldB, Murray, by.x="Name", by.y="country", all.x=TRUE)
merged[1:3,]
# Fit a model including the first principal compnent
model2=lm(authoritarianism~pathogens+PC1, data= merged)
summary(model2)
w1 = na.omit(world)
load(url("http://www.ms.ut.ee/mart/andmeteadus/world.RData"))
head(world)
w1 = na.omit(world)
w1$lgdp=log(w1$gdp)
w1$gdp=NULL # eemaldame originaali
sw1 = scale(w1)
world_full = na.omit(world)
world_full$lgdp=log(world_full$gdp)
world_full$gdp=NULL # eemaldame originaali
scaled_world = scale(world_full)
world_full["Estonia",]
scaled_world["Estonia",]
world_full["Estonia",]
k3 = kmeans(scaled_world,3)
install.packages(kableExtra)
install.packages('kableExtra')
library(dplyr)
library(data.table)
library(RPostgreSQL)
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"qHwM9hJLA!ByXG&s"
}
db = 'postgres'
host = '35.240.108.22'
user = 'kaur_lumiste'
port = 5432
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = db,
host = host, port = port,
user = user, password = pw)
rm(pw)
# check for the cartable
dbExistsTable(con, "cartable")
# query the data from postgreSQL
test <- dbGetQuery(con, "SELECT * from fms.alerts limit 10")
# query the data from postgreSQL
test <- dbGetQuery(con, "SELECT * from fms.alerts limit 10;")
# query the data from postgreSQL
test <- dbGetQuery(con, "SELECT * from fms.alerts limit 10;")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = db,
host = host, port = port,
user = user, password = pw)
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = db,
host = host, port = port,
user = user, password = pw)
db = 'postgres'
host = '35.240.108.22'
user = 'kaur_lumiste'
port = 5432
# create a connection
# save the password that we can "hide" it as best as we can by collapsing it
pw <- {
"qHwM9hJLA!ByXG&s"
}
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = db,
host = host, port = port,
user = user, password = pw)
rm(pw) # removes the password
# check for the cartable
dbExistsTable(con, "cartable")
# query the data from postgreSQL
test <- dbGetQuery(con, "SELECT * from fms.alerts limit 10;")
# check for the cartable
dbExistsTable(con, "alerts")
# check for the cartable
dbExistsTable(con, "fms.alerts")
# check for the cartable
dbExistsTable(con, "tmp_alerts")
# check for the cartable
dbExistsTable(con, "public.tmp_alerts")
# check for the cartable
dbExistsTable(con, "fms.tmp_alerts")
dbListTables(con)
# check for the cartable
dbExistsTable(con, "alerts")
# check for the cartable
dbExistsTable(con, "emails")
# check for the cartable
dbExistsTable(con, "fms.emails")
# query the data from postgreSQL
test <- dbGetQuery(con, "SELECT * from alerts limit 10;")
# query the data from postgreSQL
test <- dbGetQuery(con, "SELECT * from fmsalerts limit 10;")
# query the data from postgreSQL
test <- dbGetQuery(con, "SELECT * from fms.alerts limit 10;")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL")
install.packages("RPostgreSQL", lib = "https://ftp.eenet.ee/pub/cran/")
install.packages("RPostgreSQL", lib = "https://ftp.eenet.ee/pub/cran/")
install.packages("RPostgreSQL", repos = "https://ftp.eenet.ee/pub/cran/")
install.packages("RPostgreSQL", repos = "https://ftp.eenet.ee/pub/cran/")
install.packages("RPostgreSQL", repos = "https://ftp.eenet.ee/pub/cran/")
install.packages("RPostgreSQL", repos = "https://ftp.eenet.ee/pub/cran/")
install.packages("RPostgreSQL", repos = "https://ftp.eenet.ee/pub/cran/")
library(dplyr)
library(data.table)
library(RPostgreSQL)
library("RPostgreSQL", lib.loc="~/R/win-library/3.5")
detach("package:RPostgreSQL", unload=TRUE)
library("DBI", lib.loc="~/R/win-library/3.5")
detach("package:DBI", unload=TRUE)
library(rsconnect)
rsconnect::deployApp('C:\\Users\\E7470\\Documents\\GitHub\\andmeteadus\\2019\\Rakendused\\spotify')
library(memisc)
library(repr)
install.packages("memisc")
library(memisc)
library(repr)
rsconnect::deployApp('C:\\Users\\E7470\\Documents\\GitHub\\andmeteadus\\2019\\Rakendused\\spotify')
# Hobuvõistluste tulemused - Sinikas & Atonen
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/hobu_voistlused')
# Polüseemia uurimine - Pikksaar
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/polyseemia')
# Polüseemia uurimine - Pikksaar
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/polyseemia')
is_installed <- function(mypkg) is.element(mypkg, installed.packages()[,1])
load_or_install <- function(package_names, repos="https://cloud.r-project.org/"){
for(package_name in package_names)  {
if(!is_installed(package_name))    {
install.packages(package_name, repos=repos, dependencies = T)
}
library(package_name, character.only=TRUE, quietly=TRUE, verbose=FALSE)
}
}
load_or_install(c('shiny', 'shinydashboard', 'cluster', 'ggdendro',
'factoextra', 'MASS', 'ggplot2', 'plotly', 'dplyr',
'knitr', 'kableExtra', 'DT', 'shinyjs', 'shinyWidgets'))
# Polüseemia uurimine - Pikksaar
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/polyseemia')
# Polüseemia uurimine - Pikksaar
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/polyseemia')
# Hobuvõistluste tulemused - Sinikas & Atonen
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/hobu_voistlused')
# Riigikogu valimised - Tammesoo & Jürgenson
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/RK_valimised_2019')
# Kindlustusettevõtete tulemused - Olesk
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/kindlustus')
library(shiny)
library(dplyr)
library(ggplot2)
library(tidyr)
library(shinythemes)
install.packages('shinythemes')
library(shinythemes)
andmed_elu <-  read.csv("Elukindlustus.csv", sep = ",", header=T)
# Setting up workspace, install 'rstudioapi' if using for first time
#install.packages('rstudioapi')
setwd(dirname(rstudioapi::getActiveDocumentContext()[[2]]))
andmed_elu <-  read.csv("Elukindlustus.csv", sep = ",", header=T)
andmed_kahju <-  read.csv("Kahjukindlustus.csv", sep = ",", header=T)
andmed_uus <- andmed_elu %>%
select(-DIM2, -DIM3, -DIM4, -DIM5, -Flag.Codes, -Flags, -TIME, -Kuu)
andmed_uus_kahju <- andmed_kahju %>%
select(-DIM2, -DIM3, -DIM4, -DIM5, -Flag.Codes, -Flags, -TIME, -Kuu)
ggplot(andmed_uus, aes(x = factor(Vaatlusperiood), y = Value, fill = Elukindlustusliik)) + geom_col() +
theme(axis.text.x = element_text(angle=45, hjust=1)) + ylab("Kindlustusmaksed, tuhat €") + xlab("Aasta") +
scale_y_continuous(breaks = seq(0, 900000, 100000), labels = scales::comma)
ggplot(andmed_uus_kahju, aes(x = factor(Vaatlusperiood), y = Value, fill = Kahjukindlustusliik)) + geom_col() +
theme(axis.text.x = element_text(angle=45, hjust=1)) + ylab("Kindlustusmaksed, tuhat €") + xlab("Aasta") +
scale_y_continuous(breaks = seq(0, 2000000, 200000), labels = scales::comma)
ui <- fluidPage(theme = shinytheme("flatly"),
titlePanel("Kindlustusettevõtete majandusnäitajad 2010-2017"),
sidebarLayout(
sidebarPanel(
selectInput(inputId="Elukindlustusandja",label=strong("Vali elukindlustusandja"),
choices=unique(andmed_uus$Elukindlustusandja), selected = "Elukindlustusandjad kokku"),
radioButtons(inputId = "Näitaja", label = strong("Vali elu- ja kahjukindlustuse näitaja"),
choices = c("Saadud kindlustuspreemiad", "Kindlustusnõuete väljamaksed")),
selectInput(inputId="Kahjukindlustusandja",label=strong("Vali kahjukindlustusandja"),
choices=unique(andmed_uus_kahju$Kahjukindlustusandja), selected = "Kahjukindlustusandjad kokku"),
h5("Andmed: www.stat.ee", style = "color:grey"),
h5("Kindlustusettevõtete majandusnäitajate rakendus õppeaines statistiline andmeteadus ja visualiseerimine
MTMS.01.100", style = "color:grey"),
h5("Autor: Egle Olesk", style = "color:grey")),
mainPanel(h1("Elukindlustus- ja kahjukindlustusettevõtete majandusnäitajad"),
p("Projekti eesmärk on võrrelda aegreana 7 aasta jooksul (2010-2017) elu- ja kahjukindlustusettevõtete
majandusnäitajaid. Andmete võrdlemiseks on välja toodud joonised ning kokkuvõtlikud tabelid,
mis näitavad täieliku ülevaate saamiseks kõik aastaid korraga. Andmed on esitatud tuhandetes eurodes
ning andmeid saab sorteerida kindlustusandja ja kindlustusnäitaja järgi."),
tabsetPanel(type = "tabs",
tabPanel("Joonised", plotOutput(outputId = "joonis"),
plotOutput(outputId = "joonis_kahju")),
tabPanel("Kokkuvõte, elukindlustus", tableOutput("Kokkuvõte")),
tabPanel("Kokkuvõte, kahjukindlustus", tableOutput("Kokkuvõte_kahju")),
tabPanel("Mõisted", htmlOutput("Mõisted")))
)
)
)
server <- function(input, output){
df_elukindlustusandja <- reactive({
req(input$Elukindlustusandja)
filter(andmed_uus, Elukindlustusandja %in% input$Elukindlustusandja)
})
df_naitaja <- reactive({
req(input$Näitaja)
filter(df_elukindlustusandja(), Näitaja %in% input$Näitaja)
})
df_kahjukindlustusandja <- reactive({
req(input$Kahjukindlustusandja)
filter(andmed_uus_kahju, Kahjukindlustusandja %in% input$Kahjukindlustusandja)
})
df_naitaja_kahju <- reactive({
req(input$Näitaja)
filter(df_kahjukindlustusandja(), Näitaja %in% input$Näitaja)
})
#Genereeri joonis
output$joonis <- renderPlot({
ggplot(df_naitaja(), aes(x = factor(Vaatlusperiood), y = Value, fill = Elukindlustusliik)) +
geom_col() + theme(axis.text.x = element_text(angle=45, hjust=1)) + ylab("Kindlustusmaksed, tuhat €") +
xlab("Aasta") + scale_y_continuous(labels = scales::comma) + ggtitle("Elukindlustuse joonis") +
theme(plot.title = element_text(face="bold", color = "#666666"))
})
output$joonis_kahju <- renderPlot({
ggplot(df_naitaja_kahju(), aes(x = factor(Vaatlusperiood), y = Value, fill = Kahjukindlustusliik)) +
geom_col() + theme(axis.text.x = element_text(angle=45, hjust=1)) + ylab("Kindlustusmaksed, tuhat €") +
xlab("Aasta") + scale_y_continuous(labels = scales::comma) + ggtitle("Kahjukindlustuse joonis") +
theme(plot.title = element_text(face="bold", color = "#666666"))
})
output$Kokkuvõte <- renderTable({
df_naitaja()
})
output$Kokkuvõte_kahju <- renderTable ({
df_naitaja_kahju()
})
output$Mõisted <- renderText({
paste("<b>Kindlustuspreemia ehk kindlustusmakse</b> - summa, mida kindlustusvõtja maksab kindlustuse eest.",
"<br>" ,
"<br>" ,
"<b>Kindlustusnõuete väljamaksed</b> - makstud kindlustus- ja tagasiostusummad ning käsitluskulud." ,
"<br>" ,
"<br>" ,
"<b>Investeerimisriskiga elukindlustus</b> - elukindlustuse liik, mille puhul kindlustusandja poolt
makstav kas ühekordne või perioodiliste väljamaksete suurus sõltub lepinguga seotud
alusvara väärtusest ja lepingus garanteeritud kindlustussumma suurusest." ,
"<br>" ,
"<br>" ,
"<b>Kapitalikogumiskindlustus</b> - elukindlustuse liik, mille tegevuse all mõistetakse aktuaarsetel
arvutustel põhinevat kapitali kogumist, kui kindlustusandja võtab kindlustusvõtja või soodustatud
isiku ees elukindlustuslepingus kokkulepitud ühekordse kindlustusmakse või regulaarsete kindlustusmaksete
eest määratud kestuse ja rahalise suurusega kohustused.",
"<br>" ,
"<br>" ,
"<b>Lisakindlustus</b> - elukindlustuse liik, mis muudab kindlustuslepingu vajaduspõhiseks
ehk inimesel on võimalik valida just need riskikaitsed, mis ta arvab realiseeruvat (nt
kriitiliste haiguste kindlustus - vähk, südameinfarkt, peaajuveresoonte haigused)." ,
"<br>" ,
"<br>" ,
"<b>Tsiviilvastutuskindlustus</b> - kahjukindlustuse liik, mis hüvitab kolmandale isikule vara- ja isikukahjud,
mida kindlustusvõtja on tekitanud oma ameti- või kutsetegevuses ning üldises või igapäevases tegevuses." ,
"<br>" ,
"<br>" ,
"___________________________________" ,
"<br>" ,
"www.fi.ee" ,
"<br>" ,
"www.riigiteataja.ee" ,
"<br>" ,
"www.stat.ee")
})
}
shinyApp(ui = ui, server = server)
# Kindlustusettevõtete tulemused - Olesk
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/kindlustus')
# Kindlustusettevõtete tulemused - Olesk
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/kindlustus')
# Kindlustusettevõtete tulemused - Olesk
rsconnect::deployApp('C:/Users/E7470/Documents/GitHub/andmeteadus/2019/projektid_rakendused/kindlustus')
